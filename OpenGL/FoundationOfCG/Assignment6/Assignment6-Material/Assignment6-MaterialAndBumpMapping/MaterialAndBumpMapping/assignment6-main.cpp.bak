//
//  main.cpp
//  Assignment4-RobotsAndPartPicking
//
//  Created by SeanRen on 2019/1/16.
//  Copyright © 2019 zxtech. All rights reserved.
//
////////////////////////////////////////////////////////////////////////
//
//   Harvard University
//   CS175 : Computer Graphics
//   Professor Steven Gortler
//
////////////////////////////////////////////////////////////////////////
/*****************************************************************************
 * Original source template from book source site based on GLUT
 * Modified to use GLFW as a window manager by SeanRen
 * Corresponding codes just tested on Mac OS X and iOS
 *****************************************************************************/

#include <vector>
#include <string>
#include <memory>
#include <stdexcept>
#include <dirent.h>


//--------------------------------------------------------------------------------
//  GLEW的作用就是将合适版本的OpenGL版本对应的头文件引入，以方便调用对应的OpenGL功能。若不想使用glew
//  则在对应OS上引入合适的OpenGL头文件即可
//--------------------------------------------------------------------------------
#include <GL/glew.h>
//#include <OpenGL/gl3.h>
//#include <OpenGL/gl3ext.h>
#include <GLFW/glfw3.h>

#include "cvec.h"
#include "matrix4.h"
#include "quat.h"
#include "rigtform.h"
#include "arcball.h"
#include "ppm.h"
#include "glsupport.h"
#include "asstcommon.h"
#include "scenegraph.h"
#include "drawer.h"
#include "picker.h"

//#include "geometrymaker.h"
#include "geometry.h"
#include "material.h"

#include "perfMonitor.h"

void CheckStatus( GLuint obj )
{
    GLint status = GL_FALSE;
    if( glIsShader(obj) ) glGetShaderiv( obj, GL_COMPILE_STATUS, &status );
    if( glIsProgram(obj) ) glGetProgramiv( obj, GL_LINK_STATUS, &status );
    if( status == GL_TRUE ) return;
    GLchar log[ 1 << 16 ] = { 0 };
    if( glIsShader(obj) ) glGetShaderInfoLog( obj, sizeof(log), NULL, log );
    if( glIsProgram(obj) ) glGetProgramInfoLog( obj, sizeof(log), NULL, log );
    std::cerr << log << std::endl;
    exit( -1 );
}

void AttachShader( GLuint program, GLenum type, const char* src )
{
    GLuint shader = glCreateShader( type );
    glShaderSource( shader, 1, &src, NULL );
    glCompileShader( shader );
    CheckStatus( shader );
    glAttachShader( program, shader );
    glDeleteShader( shader );
}

GLuint LoadProgram( const char* vert, const char* geom, const char* frag )
{
    GLuint prog = glCreateProgram();
    if( vert ) AttachShader( prog, GL_VERTEX_SHADER, vert );
    if( geom ) AttachShader( prog, GL_GEOMETRY_SHADER, geom );
    if( frag ) AttachShader( prog, GL_FRAGMENT_SHADER, frag );
    glLinkProgram( prog );
    CheckStatus( prog );
    return prog;
}

#define GLSL(version, shader) "#version " #version "\n" #shader


GLuint program;
GLuint VAO;
void initData()
{
    const char* vert = GLSL
    (
     410 core,
     layout( location = 0 ) in vec2 position;
     void main()
     {
     gl_Position = vec4( position, 0.0, 1.0 );
     }
     );
    
    const char* frag = GLSL
    (
     410 core,
     out vec4 FragColor;
     void main()
     {
     FragColor = vec4( 0.6, 0.6, 1.0, 0.5 );
     }
     );
    
    program = LoadProgram( vert, NULL, frag );
    
    glGenVertexArrays( 1, &VAO );
    glBindVertexArray( VAO );
    
    GLuint vertex_buffer = 0;
    glGenBuffers( 1, &vertex_buffer );
    glBindBuffer( GL_ARRAY_BUFFER, vertex_buffer );
    float data[] =
    {
    0.0f,0.8f,
    -0.8f, 0.0f,
    0.8f,0.0f
    };
    glBufferData( GL_ARRAY_BUFFER, sizeof(data), data, GL_STATIC_DRAW );
    
    GLuint index_buffer = 0;
    glGenBuffers( 1, &index_buffer );
    glBindBuffer( GL_ELEMENT_ARRAY_BUFFER, index_buffer );
    unsigned int indexes[] =
    {
    0,1,2
    };
    glBufferData( GL_ELEMENT_ARRAY_BUFFER, sizeof(indexes), indexes, GL_STATIC_DRAW );
    
    glEnableVertexAttribArray( 0 );
    
    glVertexAttribPointer( 0, 2, GL_FLOAT, GL_FALSE, 0, 0 );
    
    glBindVertexArray( 0 );
}


using namespace std;      // for string, vector, iostream, and other standard C++ stuff
static void pick();

// G L O B A L S ///////////////////////////////////////////////////

//indict whether to use source directly
static const bool g_GlSourceFlag = false;


static const float g_frustMinFov = 60.0;  // A minimal of 60 degree field of view
static float g_frustFovY = g_frustMinFov; // FOV in y direction (updated by updateFrustFovY)

static const float g_frustNear = -0.1;    // near plane
static const float g_frustFar = -50.0;    // far plane
static const float g_groundY = -2.0;      // y coordinate of the ground
static const float g_groundSize = 10.0;   // half the ground length

static int g_windowWidth = 512;
static int g_windowHeight = 512;
static bool g_mouseClickDown = false;    // is the mouse button pressed
static bool g_mouseLClickButton, g_mouseRClickButton, g_mouseMClickButton;
static int g_mouseClickX, g_mouseClickY,g_pickingMouseX,g_pickingMouseY; // coordinates for mouse click event
//static int g_activeShader = 1;
//static int g_activeCube = 0;
static bool g_pickingFlag = false;
static int g_activeEyeFrame = 1;

static GLFWwindow* window;

// --------- Materials
// This should replace all the contents in the Shaders section, e.g., g_numShaders, g_shaderFiles, and so on
static shared_ptr<Material> g_redDiffuseMat,
g_blueDiffuseMat,
g_bumpFloorMat,
g_arcballMat,
g_pickingMat,
g_lightMat;

shared_ptr<Material> g_overridingMaterial;


// --------- Geometry
typedef SgGeometryShapeNode<Geometry> MyShapeNode;

// ===================================================================
// Declare the scene graph and pointers to suitable nodes in the scene
// graph
// ===================================================================

//basic scene variable
static shared_ptr<SgRootNode> g_world;
static shared_ptr<SgRbtNode> g_skyNode, g_groundNode, g_robot1Node, g_robot2Node;
static shared_ptr<SgRbtNode> g_currentPickedRbtNode; // used later when you do picking

#pragma mark - Scene Variables

// Buffered Geometry Object instances
static shared_ptr<SimpleIndexedGeometryPNTBX> g_ground, g_cube, g_sphere;
// define two lights positions in world space=
static const Cvec3 g_light1(2.0, 3.0, 14.0), g_light2(-2, -3.0, -5.0);
static RigTForm g_skyRbt = RigTForm::makeTranslation(0.0, 0.25, 4.0);
//初始tramsformation，将object frame的原点保持不动，每个cube使用一个object matrix。由于在shader中使用了offset，故此处对象帧的起点都为原点。
static RigTForm g_objectRbt[3] = {RigTForm(Cvec3(0,0,0)),RigTForm(Cvec3(0,0,0)),RigTForm(Cvec3(0,0,0))};

static RigTForm g_auxiliaryRbt;

static const float g_sphereRaidusScreenRatio = 0.25;
static float g_arcballScale;
static float g_arcballScreenRadius = g_sphereRaidusScreenRatio * min(g_windowWidth,g_windowHeight);
static bool g_arcballUpdateFlag = true;

static RigTForm g_motionRbt;

//for new assignments - variables
static Cvec3f g_objectColors[3] = {Cvec3f(1, 0, 0),Cvec3f(0, 0, 1),Cvec3f(0.5, 0.5, 0)};

shared_ptr<Texture> colorTex;

///////////////// END OF G L O B A L S //////////////////////////////////////////////////

//--------------------------------------------------------------------------------
//  GLFW global variables
//--------------------------------------------------------------------------------
GLfloat cursor_x        = 0.f;
GLfloat cursor_y        = 0.f;

#pragma mark - Geometry Helper Function

//static void initGround() {
//    // A x-z plane at y = g_groundY of dimension [-g_groundSize, g_groundSize]^2
//    VertexPN vtx[4] = {
//        VertexPN(-g_groundSize, g_groundY, -g_groundSize, 0, 1, 0),
//        VertexPN(-g_groundSize, g_groundY,  g_groundSize, 0, 1, 0),
//        VertexPN( g_groundSize, g_groundY,  g_groundSize, 0, 1, 0),
//        VertexPN( g_groundSize, g_groundY, -g_groundSize, 0, 1, 0),
//    };
//    unsigned short idx[] = {0, 1, 2, 0, 2, 3};
//    g_ground.reset(new Geometry(&vtx[0], &idx[0], 4, 6));
//}
//
//static void initCubes() {
//    int ibLen, vbLen;
//    getCubeVbIbLen(vbLen, ibLen);
//
//    // Temporary storage for cube geometry
//    vector<VertexPN> vtx(vbLen);
//    vector<unsigned short> idx(ibLen);
//
//    makeCube(1, vtx.begin(), idx.begin());
//    g_cube.reset(new Geometry(&vtx[0], &idx[0], vbLen, ibLen));
//}
//
//static void initSphere() {
//    int ibLen, vbLen;
//    int slices = 15,stacks = 15;
//    getSphereVbIbLen(slices,stacks,vbLen, ibLen);
//
//    // Temporary storage for cube geometry
//    vector<VertexPN> vtx(vbLen);
//    vector<unsigned short> idx(ibLen);
//
//    makeSphere(1, slices, stacks, vtx.begin(), idx.begin());
//    g_sphere.reset(new Geometry(&vtx[0], &idx[0], vbLen, ibLen));
//}

//======================================================================
// STEP 3: Replace initGround(), initCube(), and  initSphere() functions
//         with the following defintion. This ensures VertexPNTBX and
//         SimpleIndexedGeometryPNTBX are used, which provides extra
//         vertex attributes used for Bump Mapping later
//=======================================================================
static void initGround() {
    int ibLen, vbLen;
    getPlaneVbIbLen(vbLen, ibLen);
    
    // Temporary storage for cube Geometry
    vector<VertexPNTBX> vtx(vbLen);
    vector<unsigned short> idx(ibLen);
    
    makePlane(g_groundSize*2, vtx.begin(), idx.begin());
    //此处new关键字的使用，会出现no viable operator ‘=’的提示
    g_ground.reset(new SimpleIndexedGeometryPNTBX(&vtx[0], &idx[0], vbLen, ibLen));
}

static void initCubes() {
    int ibLen, vbLen;
    getCubeVbIbLen(vbLen, ibLen);
    
    // Temporary storage for cube Geometry
    vector<VertexPNTBX> vtx(vbLen);
    vector<unsigned short> idx(ibLen);
    
    makeCube(1, vtx.begin(), idx.begin());
    g_cube.reset(new SimpleIndexedGeometryPNTBX(&vtx[0], &idx[0], vbLen, ibLen));
}

//======================================================================
// STEP 4: Changes the definition of sendProjectionMatrix to use Uniforms
//         instead of ShaderState
//=======================================================================

// takes a projection matrix and send to the the shaders
inline void sendProjectionMatrix(Uniforms& uniforms, const Matrix4& projMatrix) {
    uniforms.put("uProjMatrix", projMatrix);
}



// update g_frustFovY from g_frustMinFov, g_windowWidth, and g_windowHeight
static void updateFrustFovY() {
    if (g_windowWidth >= g_windowHeight)
        g_frustFovY = g_frustMinFov;
    else {
        const double RAD_PER_DEG = 0.5 * CS175_PI/180;
        g_frustFovY = atan2(sin(g_frustMinFov * RAD_PER_DEG) * g_windowHeight / g_windowWidth, cos(g_frustMinFov * RAD_PER_DEG)) / RAD_PER_DEG;
    }
}

static Matrix4 makeProjectionMatrix() {
    return Matrix4::makeProjection(
                                   g_frustFovY, g_windowWidth / static_cast <double> (g_windowHeight),
                                   g_frustNear, g_frustFar);
}

//--------------------------------------------------------------------------------
//  compute screen to eye scale for object frame origin in eye frame
//--------------------------------------------------------------------------------
static float computeArcballScale(const Cvec4 objectRbtOrigin){
    float screenToEyeScale;
    double zCoord = objectRbtOrigin[2];
    screenToEyeScale = getScreenToEyeScale(zCoord, g_frustFovY, g_windowHeight);
    
    return screenToEyeScale;
}

static RigTForm getEyeRbt(){
    RigTForm eyeRbt;
    if(g_activeEyeFrame == 1){
        g_currentPickedRbtNode = g_skyNode;
        eyeRbt = getPathAccumRbt(g_world, g_skyNode);
    }else if(g_activeEyeFrame == 2){
        //when you get a path from g_world to g_robot1Node,the path is a direct path and just includes g_world,g_robot1Node.
        // make g_skyCamera RBT left multiply the path to get an appropriate view angle.
        g_currentPickedRbtNode = g_robot1Node;
        eyeRbt = getPathAccumRbt(g_world, g_skyNode) * getPathAccumRbt(g_world, g_robot1Node);
    }else{
        g_currentPickedRbtNode=g_robot2Node;
        eyeRbt = getPathAccumRbt(g_world, g_skyNode) * getPathAccumRbt(g_world, g_robot2Node);
    }
    return eyeRbt;
}


//=========================================================================
// STEP 5: Simplify your arcball drawing and drawStuff() by using materials
//         In particular, all occurence of
//             const ShaderState& curSS
//         should probably be replaced with
//             Uniforms& uniforms
//         and occurences of `curSS' be replaced with `uniforms'
//=========================================================================

static void drawStuff(const Uniforms& uniforms, bool picking){
        checkGlError("before drawStuff starting point");
        // build & send proj. matrix to vshader
        const Matrix4 projmat = makeProjectionMatrix();
    
        // use the skyRbt as the eyeRbt
        const RigTForm eyeRbt = RigTForm::makeTranslation(0.0, 0.25, 4.0);
        const RigTForm invEyeRbt = inv(eyeRbt);
    
        const Cvec3 eyeLight1 = Cvec3(invEyeRbt * Cvec4(g_light1, 1)); // g_light1 position in eye coordinates
        const Cvec3 eyeLight2 = Cvec3(invEyeRbt * Cvec4(g_light2, 1)); // g_light2 position in eye coordinates
    //    uniforms.put("uLight", eyeLight1);
    //    uniforms.put("uLight2",eyeLight2);
    
        Material sphereMat("./shaders/basic-gl3.vshader","./shaders/solid-gl3.fshader");
        
        sphereMat.getUniforms().put("uLight", eyeLight1);
        sphereMat.getUniforms().put("uLight2", eyeLight2);
        
        sendProjectionMatrix(sphereMat.getUniforms(), projmat);
    
        RigTForm mvmRbt = invEyeRbt * RigTForm::identity();
    
        Matrix4 MVM = rigTFormToMatrix(mvmRbt); //* scaleMatrix;
        Matrix4 NMVM = normalMatrix(MVM);
        sendModelViewNormalMatrix(sphereMat.getUniforms(), MVM, NMVM);
        
        sphereMat.getUniforms().put("uColor", g_objectColors[0]);
        
        Uniforms extraUniforms;
        
        //extraUniforms.put("uTexColor",colorTex);
    
        //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); // draw wireframe
        //g_sphere->draw(curSS);
    
        checkGlError("before sphereMat.draw");
        sphereMat.draw(*g_ground, extraUniforms);
        checkGlError("drawSutff() ending point");
    
    
    
}

static void display() {
    checkGlError("display() starting point");
    //glUseProgram(g_shaderStates[g_activeShader]->program);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);                   // clear framebuffer color&depth
    
    //Todo,temprarily declaring an Unifroms variable
    Uniforms uniforms;
    
    checkGlError("before drawStuff");
    drawStuff(uniforms,false);
    checkGlError("display() ending point");
    
    //   show the back buffer (where we rendered stuff)
    //  glfwSwapBuffers(window);
}

static void reshape(GLFWwindow* window,const int w, const int h) {
    g_windowWidth = w;
    g_windowHeight = h;
    glViewport(0, 0, w, h);
    cerr << "Size of window is now " << w << "x" << h << endl;
    updateFrustFovY();
    g_arcballScreenRadius = g_sphereRaidusScreenRatio * min(g_windowWidth,g_windowHeight);
}

static void displayWindow(GLFWwindow* window){
    display();
}


static void motion(const float x, const float y) {
    if(x<0 || y<0)
        return;
    
    Cvec2 startScreenPos = Cvec2(g_mouseClickX,g_mouseClickY);
    Cvec2 endScreenPos = Cvec2(x,g_windowHeight - y - 1); //convert from window coordnate to OpenGL window coordinate.
    Cvec2 centerScreenPos = getScreenSpaceCoord(g_objectRbt[0].getTranslation(),makeProjectionMatrix(), 0.0, 0.0, g_windowWidth, g_windowHeight);
    Quat arcballQuat = arcball(Cvec3(centerScreenPos,0), g_arcballScreenRadius, startScreenPos, endScreenPos);
    
    const double dx = x - g_mouseClickX;
    const double dy = g_windowHeight - y - 1 - g_mouseClickY;
    
    g_arcballUpdateFlag = true;
    
    RigTForm m;
    if (g_mouseLClickButton && !g_mouseRClickButton) { // left button down?
  //    m = RigTForm::makeXRotation(-dy) * RigTForm::makeYRotation(dx);
        m = RigTForm(arcballQuat);
    }
    else if (g_mouseRClickButton && !g_mouseLClickButton) { // right button down?
        m = RigTForm(Cvec3(dx, dy, 0) * g_arcballScale/**0.01*/);
    }
    else if (g_mouseMClickButton || (g_mouseLClickButton && g_mouseRClickButton)) {  // middle or (left and right) button down?
        m = RigTForm(Cvec3(0, 0, -dy) * g_arcballScale /**0.01*/);
        g_arcballUpdateFlag = false;
    }
    
    
//    if (g_mouseClickDown) {
//        if(g_activeCube == 0){
//            //g_objectRbt[0] *= m; // Simply right-multiply is WRONG
//            g_auxiliaryRbt = makeMixedFrame(g_objectRbt[0], g_skyRbt);
//            g_objectRbt[0] = doQtoOwrtA(m, g_objectRbt[0], g_auxiliaryRbt);
//            
//        }else if(g_activeCube == 1){
//            g_auxiliaryRbt = makeMixedFrame(g_objectRbt[1], g_skyRbt);
//            g_objectRbt[1] = doQtoOwrtA(m, g_objectRbt[1], g_auxiliaryRbt);
//        }else{
//            RigTForm invMouseMotionMatrix = inv(m);
//            g_skyRbt = doQtoOwrtA(m, g_skyRbt, g_skyRbt);
//        }
        g_motionRbt = m;
//    }
    
    
    
    g_mouseClickX = x;
    g_mouseClickY = g_windowHeight - y - 1;
}

void cursor_position_callback( GLFWwindow* window, double x, double y )
{
    cursor_x = (float) x;
    cursor_y = (float) y;
}

static void mouse(GLFWwindow* window, const int button, const int action, int mods) {
    g_mouseClickX = cursor_x;
    g_mouseClickY = g_windowHeight - cursor_y - 1;  // conversion from GLUT window-coordinate-system to OpenGL window-coordinate-system
    g_mouseLClickButton=g_mouseMClickButton=g_mouseRClickButton=false;
    
    g_mouseLClickButton |= (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS);
    g_mouseRClickButton |= (button == GLFW_MOUSE_BUTTON_RIGHT && action == GLFW_PRESS);
    g_mouseMClickButton |= (button == GLFW_MOUSE_BUTTON_4 && action == GLFW_PRESS);
    
    g_mouseLClickButton &= !(button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_RELEASE);
    g_mouseRClickButton &= !(button == GLFW_MOUSE_BUTTON_RIGHT && action == GLFW_RELEASE);
    g_mouseMClickButton &= !(button == GLFW_MOUSE_BUTTON_4 && action == GLFW_RELEASE);
    
    g_mouseClickDown = g_mouseLClickButton || g_mouseRClickButton || g_mouseMClickButton;
    
    if(g_mouseClickDown){
        g_pickingMouseX = g_mouseClickX;
        g_pickingMouseY = g_mouseClickY;
    }
    
    
}

static void error_callback(int error, const char* description)
{
    fprintf(stderr, "Error: %s\n", description);
}

//static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
//{
//    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
//        glfwSetWindowShouldClose(window, GLFW_TRUE);
//
//    if (key == GLFW_MOUSE_BUTTON_LEFT | GLFW_MOUSE_BUTTON_RIGHT | GLFW_MOUSE_BUTTON_MIDDLE && action == GLFW_PRESS) {
//
//    }
//}

static void keyboard(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if(action == GLFW_PRESS){
        switch (key) {
            case GLFW_KEY_ESCAPE:
                glfwSetWindowShouldClose(window, GLFW_TRUE);//exit(0);   // ESC
            case GLFW_KEY_H:
                cout << " ============== H E L P ==============\n\n"
                << "h\t\thelp menu\n"
                << "s\t\tsave screenshot\n"
                << "f\t\tToggle flat shading on/off.\n"
                << "o\t\tCycle object to edit\n"
                << "p\t\tPart Picking\n"
                << "v\t\tCycle view\n"
                << "drag left mouse to rotate\n" << endl;
                break;
            case GLFW_KEY_S:
                glFlush();
                writePpmScreenshot(g_windowWidth, g_windowHeight, "out.ppm");
                break;
            case GLFW_KEY_O:
//                g_activeCube++;
//                if(g_activeCube > 2)
//                    g_activeCube=0;
                break;
            case GLFW_KEY_P:
                g_pickingFlag ^= true;
                break;
            case GLFW_KEY_F:
//                g_activeShader ^= 1;
                break;
            case GLFW_KEY_V:
                g_activeEyeFrame++;
                if(g_activeEyeFrame > 3)
                    g_activeEyeFrame=1;
                break;
        }
    }
}

static int initGlfwState(){
    if(!glfwInit())
        return -1;
    
    //设置OpenGL core profile
    glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 4 );
    glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 1 );
    glfwWindowHint( GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE );
    glfwWindowHint( GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE );
    
    //创建本地窗口
    window = glfwCreateWindow(g_windowWidth, g_windowHeight, "Robots and Part Picking", NULL, NULL);
    if(!window){
        glfwTerminate();
        return -1;
    }
    
    glfwMakeContextCurrent(window);
    
    cout << "GLFW version                : " << glfwGetVersionString() << endl;
    cout << "GL_VERSION                  : " << glGetString( GL_VERSION ) << endl;
    cout << "GL_VENDOR                   : " << glGetString( GL_VENDOR ) << endl;
    cout << "GL_RENDERER                 : " << glGetString( GL_RENDERER ) << endl;
    cout << "GL_SHADING_LANGUAGE_VERSION : " << glGetString( GL_SHADING_LANGUAGE_VERSION ) << endl;
    
    //鼠标指针位置回调
    glfwSetCursorPosCallback(window, cursor_position_callback);
    //鼠标动作回调设置
    glfwSetMouseButtonCallback(window, mouse);
    
    //窗口尺寸变化事件
    glfwSetFramebufferSizeCallback(window, reshape);
    //键盘事件回调
    glfwSetKeyCallback(window, keyboard);
    
    //error callback
    glfwSetErrorCallback(error_callback);
    
    return 0;
    
}

static void initGLState() {
    glClearColor(128./255., 200./255., 255./255., 0.);
    glClearDepth(-1.f);
    //glClear(GL_DEPTH_BUFFER_BIT);
    
    //  glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    //  glPixelStorei(GL_PACK_ALIGNMENT, 1);
    //  glCullFace(GL_BACK);
    //  glEnable(GL_CULL_FACE);
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_GREATER);
    //  glReadBuffer(GL_BACK);
    
    glEnable(GL_FRAMEBUFFER_SRGB);
}

//static void initShaders() {
//    g_shaderStates.resize(g_numShaders);
//    for (int i = 0; i < g_numShaders; ++i) {
//        g_shaderStates[i].reset(new ShaderState(g_shaderFiles[i][0], g_shaderFiles[i][1]));
//    }
//}

static void initGeometry() {
    initGround();
    //initCubes();
    
    //colorTex.reset(new ImageTexture("./shaders/Color_Tex.ppm",true));
}

int main(int argc, char * argv[]) {
    try {
        //initGLFW
        initGlfwState();

        GLenum err = glewInit(); // load the OpenGL extensions

        if (GLEW_OK != err){
            /* Problem: glewInit failed, something is seriously wrong. */
            fprintf(stderr, "Error: %s\n", glewGetErrorString(err));
        }
        fprintf(stdout, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));

        if(GLEW_VERSION_4_1)
            fprintf(stdout, "GLEW VERSION 4.1 Supported \n");

//        checkGlError("before initGLState");
        initGLState();
//        checkGlError("before initGeometry");
        initGeometry();
//        checkGlError("after initGeometry");


        //glfwSetWindowRefreshCallback(window, displayWindow); //根据窗口刷新回调函数

        OpenGL_Helper::PerfMonitor perfMonitor;
        float fps;

        //mac os x的窗口调用会限制帧数
        checkGlError("before glfwWindowShouldClose");
        while( !glfwWindowShouldClose(window) ){
            checkGlError("after glfwWindowShouldClose");
            display();
            //perfMonitor.Update(fps);
            //cout << "Current FPS at timeinterval:" << glfwGetTime() << " is " << fps << endl;

            motion(cursor_x, cursor_y);

            glfwSwapBuffers( window );

            //glfwPollEvents();
            glfwWaitEvents(); //if window is put in background,then didn't return immediatetly until at least one available window event is call.
        }

        glfwTerminate();

        return 0;
    }
    catch (const runtime_error& e) {
        cout << "Exception caught: " << e.what() << endl;
        return -1;
    }
}

